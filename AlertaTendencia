<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>Monitor Cripto Avançado</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-black text-white p-4 space-y-4">
  <div class="flex flex-col gap-2">
    <!-- Cabeçalho com seleção de par e botões de configuração -->
    <div class="flex gap-2">
      <select id="par-moeda" class="bg-gray-800 p-2 rounded">
        <option value="BTCUSDT">BTC/USDT</option>
        <option value="ETHUSDT">ETH/USDT</option>
        <option value="BNBUSDT">BNB/USDT</option>
        <option value="SOLUSDT">SOL/USDT</option>
        <option value="XRPUSDT">XRP/USDT</option>
      </select>
      <button onclick="abrirConfiguracaoTelegram()" class="bg-blue-600 px-3 rounded">Telegram</button>
      <button onclick="abrirConfiguracaoHorario()" class="bg-purple-600 px-3 rounded">Horário</button>
    </div>

    <!-- Container para os cards das análises por intervalo de tempo -->
    <div id="cards" class="grid grid-cols-1 md:grid-cols-3 gap-4"></div>

    <!-- Popup de configuração do Telegram -->
    <div id="popup-config" class="fixed inset-0 bg-black bg-opacity-90 hidden items-center justify-center">
      <div class="bg-gray-800 p-4 rounded-xl w-80 space-y-2">
        <h2 class="text-lg font-bold">Configurar Telegram</h2>
        <input id="input-token" class="w-full p-2 rounded bg-gray-700 text-white" placeholder="Token do Bot">
        <input id="input-id" class="w-full p-2 rounded bg-gray-700 text-white" placeholder="Chat ID">
        <div class="flex justify-end gap-2 pt-2">
          <button onclick="salvarConfiguracaoTelegram()" class="bg-green-600 px-3 py-1 rounded">Salvar</button>
          <button onclick="fecharPopup()" class="bg-red-600 px-3 py-1 rounded">Fechar</button>
        </div>
      </div>
    </div>

    <!-- Popup de configuração do horário de funcionamento -->
    <div id="popup-horario" class="fixed inset-0 bg-black bg-opacity-90 hidden items-center justify-center">
      <div class="bg-gray-800 p-4 rounded-xl w-80 space-y-2">
        <h2 class="text-lg font-bold">Horário de Funcionamento</h2>
        <input id="inicio-horario" class="w-full p-2 rounded bg-gray-700 text-white" placeholder="Início (ex: 05:00)">
        <input id="fim-horario" class="w-full p-2 rounded bg-gray-700 text-white" placeholder="Fim (ex: 23:00)">
        <div class="flex justify-end gap-2 pt-2">
          <button onclick="salvarHorario()" class="bg-green-600 px-3 py-1 rounded">Salvar</button>
          <button onclick="fecharPopupHorario()" class="bg-red-600 px-3 py-1 rounded">Fechar</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Busca os dados de 24h do par selecionado usando API da Binance
    async function fetchDadosTicker(symbol) {
      const url = `https://api.binance.com/api/v3/ticker/24hr?symbol=${symbol}`;
      const res = await fetch(url);
      return res.json();
    }

    // Gera dados simulados para análise (deve ser substituído por cálculo real dos indicadores)
    async function analisarPar(symbol) {
      const ticker = await fetchDadosTicker(symbol);
      const precoAtual = parseFloat(ticker.lastPrice);
      const volume = parseFloat(ticker.quoteVolume);

      // Indicadores simulados (substituir com cálculo real de RSI, MACD, EMA etc)
      const rsi = Math.random() * 100;
      const macd = Math.random() * 100;
      const ema = precoAtual * (0.995 + Math.random() * 0.01);
      const candle = Math.random() > 0.5 ? "Alta" : "Baixa";

      const score = calcularScore(rsi, macd, precoAtual, ema, candle);
      const tendencia = definirTendencia(score);

      return { precoAtual, volume, rsi, macd, ema, candle, score, tendencia };
    }

    // Calcula o score com base nos indicadores simulados
    function calcularScore(rsi, macd, preco, ema, candle) {
      let score = 0;
      if (rsi > 50 && rsi < 70) score += 1;
      if (macd > 50) score += 1;
      if (preco > ema) score += 1;
      if (candle === "Alta") score += 1;
      return score;
    }

    // Define a tendência baseada no score final
    function definirTendencia(score) {
      if (score >= 3.5) return { texto: "Alta", cor: "text-green-400", seta: "↗" };
      if (score <= 1.5) return { texto: "Baixa", cor: "text-red-400", seta: "↘" };
      return { texto: "Neutra", cor: "text-yellow-400", seta: "→" };
    }

    // Atualiza os cards com os dados para cada intervalo de tempo
    async function atualizarAnalise() {
      const par = document.getElementById("par-moeda").value;
      const cards = document.getElementById("cards");
      cards.innerHTML = "";

      const intervalos = ["15m", "1h", "4h"];
      for (const tf of intervalos) {
        const analise = await analisarPar(par);
        const card = document.createElement("div");
        card.className = "bg-gray-900 p-4 rounded-xl shadow space-y-2";
        card.innerHTML = `
          <h3 class="text-lg font-bold">${par} - ${tf}</h3>
          <p>Preço: $${analise.precoAtual.toFixed(2)}</p>
          <p>RSI: ${analise.rsi.toFixed(2)}</p>
          <p>MACD: ${analise.macd.toFixed(2)}</p>
          <p>EMA: $${analise.ema.toFixed(2)}</p>
          <p>Candle: ${analise.candle}</p>
          <p>Score: ${analise.score}/4</p>
          <p class="${analise.tendencia.cor}">Tendência: ${analise.tendencia.seta} ${analise.tendencia.texto}</p>
        `;
        cards.appendChild(card);

        // Envio de alerta via Telegram apenas para o timeframe de 15m com sinal forte
        if (tf === "15m" && analise.score >= 3.5) enviarAlertaTelegram(`${par} LONG (${tf}) - Score: ${analise.score}/4`);
        if (tf === "15m" && analise.score <= 1.5) enviarAlertaTelegram(`${par} SHORT (${tf}) - Score: ${analise.score}/4`);
      }
    }

    // Exibe popup de configuração do Telegram e preenche com dados salvos
    function abrirConfiguracaoTelegram() {
      document.getElementById("popup-config").classList.remove("hidden");
      document.getElementById("input-token").value = localStorage.getItem("telegram_token") || "";
      document.getElementById("input-id").value = localStorage.getItem("telegram_id") || "";
    }

    // Salva dados do Telegram no localStorage
    function salvarConfiguracaoTelegram() {
      localStorage.setItem("telegram_token", document.getElementById("input-token").value);
      localStorage.setItem("telegram_id", document.getElementById("input-id").value);
      fecharPopup();
    }

    // Envia alerta via Telegram usando dados salvos no localStorage
    function enviarAlertaTelegram(texto) {
      const token = localStorage.getItem("telegram_token");
      const chatId = localStorage.getItem("telegram_id");
      if (!token || !chatId) return;

      fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: chatId, text: texto })
      });
    }

    // Fecha popup de configuração do Telegram
    function fecharPopup() {
      document.getElementById("popup-config").classList.add("hidden");
    }

    // Exibe popup para configurar horário de funcionamento
    function abrirConfiguracaoHorario() {
      document.getElementById("popup-horario").classList.remove("hidden");
      document.getElementById("inicio-horario").value = localStorage.getItem("hora_inicio") || "05:00";
      document.getElementById("fim-horario").value = localStorage.getItem("hora_fim") || "23:00";
    }

    // Salva horário de funcionamento no localStorage
    function salvarHorario() {
      localStorage.setItem("hora_inicio", document.getElementById("inicio-horario").value);
      localStorage.setItem("hora_fim", document.getElementById("fim-horario").value);
      fecharPopupHorario();
    }

    // Fecha popup de horário
    function fecharPopupHorario() {
      document.getElementById("popup-horario").classList.add("hidden");
    }

    // Verifica se o horário atual está dentro do período configurado
    function dentroDoHorario() {
      const agora = new Date();
      const horaAtual = agora.getHours() + agora.getMinutes() / 60;
      const [hi, mi] = (localStorage.getItem("hora_inicio") || "05:00").split(":");
      const [hf, mf] = (localStorage.getItem("hora_fim") || "23:00").split(":");
      const inicio = parseInt(hi) + parseInt(mi) / 60;
      const fim = parseInt(hf) + parseInt(mf) / 60;
      return horaAtual >= inicio && horaAtual <= fim;
    }

    // Atualiza as análises ao carregar e a cada minuto se dentro do horário
    if (dentroDoHorario()) atualizarAnalise();
    setInterval(() => {
      if (dentroDoHorario()) atualizarAnalise();
    }, 15000);
  </script>
</body>
</html>
